{"version":3,"sources":["../src/server.js"],"names":["express","require","bodyParser","mongoose","createError","reviewsRouter","config","connect","database","useNewUrlParser","connection","once","console","log","err","app","use","json","req","res","next","statusCode","status","code","message","listen","port","Crucible","getReviews","crucibleUrl"],"mappings":";;AAIA;;;;AAJA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AAGA,IAAMI,aAAa,GAAGJ,OAAO,CAAC,wBAAD,CAA7B;;AACA,IAAMK,MAAM,GAAGL,OAAO,CAAC,iBAAD,CAAtB,C,CAEA;;;AACAE,QAAQ,CAACI,OAAT,CAAiBD,MAAM,CAACE,QAAxB,EAAkC;AAChCC,EAAAA,eAAe,EAAE;AADe,CAAlC;AAGA,IAAMC,UAAU,GAAGP,QAAQ,CAACO,UAA5B;AAEAA,UAAU,CAACC,IAAX,CAAgB,MAAhB,EAAwB,YAAM;AAC5BC,EAAAA,OAAO,CAACC,GAAR,wBAA4BP,MAAM,CAACE,QAAnC;AACD,CAFD;AAIAE,UAAU,CAACC,IAAX,CAAgB,OAAhB,EAAyB,UAACG,GAAD,EAAS;AAChCF,EAAAA,OAAO,CAACC,GAAR,0BAA8BC,GAA9B;AACD,CAFD,E,CAIA;;AACA,IAAMC,GAAG,GAAGf,OAAO,EAAnB;AACAe,GAAG,CAACC,GAAJ,CAAQd,UAAU,CAACe,IAAX,EAAR;AACAF,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBX,aAArB,E,CAEA;;AACAU,GAAG,CAACC,GAAJ,CAAQ,UAASE,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BA,EAAAA,IAAI,CAAChB,WAAW,CAAC,GAAD,CAAZ,CAAJ;AACD,CAFD,E,CAIA;;AACAW,GAAG,CAACC,GAAJ,CAAQ,UAASF,GAAT,EAAcI,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACpC,MAAIC,UAAU,GAAGP,GAAG,CAACQ,MAAJ,IAAc,GAA/B;AACAH,EAAAA,GAAG,CAACG,MAAJ,CAAWD,UAAX,EAAuBJ,IAAvB,CAA4B;AAC1BM,IAAAA,IAAI,EAAEF,UADoB;AAE1BG,IAAAA,OAAO,EAAEV,GAAG,CAACU;AAFa,GAA5B;AAID,CAND;AAQAT,GAAG,CAACU,MAAJ,CAAWnB,MAAM,CAACoB,IAAlB,EAAwB,SAAxB,EAAmC;AAAA,SAAMd,OAAO,CAACC,GAAR,6BAAiCP,MAAM,CAACoB,IAAxC,EAAN;AAAA,CAAnC;;AAGAC,wBAASC,UAAT,CAAoBtB,MAAM,CAACuB,WAA3B,EAAwC,UAACf,GAAD,EAAMK,GAAN,EAAc;AACpD,MAAIL,GAAJ,EAAS;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD,GAFD,MAEO;AACLF,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACD;AACF,CAND","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mongoose = require('mongoose');\r\nconst createError = require('http-errors');\r\nimport Crucible from \"./crucible-api\";\r\n\r\nconst reviewsRouter = require('./routes/reviews.route');\r\nconst config = require('./config/config');\r\n\r\n// database connection\r\nmongoose.connect(config.database, {\r\n  useNewUrlParser: true\r\n});\r\nconst connection = mongoose.connection;\r\n\r\nconnection.once('open', () => {\r\n  console.log(`connected to ${config.database}`);\r\n});\r\n\r\nconnection.once('error', (err) => {\r\n  console.log(`database error ${err}`);\r\n});\r\n\r\n// express\r\nconst app = express();\r\napp.use(bodyParser.json());\r\napp.use('/projects', reviewsRouter);\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  var statusCode = err.status || 500;\r\n  res.status(statusCode).json({\r\n    code: statusCode,\r\n    message: err.message\r\n  });\r\n});\r\n\r\napp.listen(config.port, '0.0.0.0', () => console.log(`listening on port ${config.port}`));\r\n\r\n\r\nCrucible.getReviews(config.crucibleUrl, (err, res) => {\r\n  if (err) {\r\n    console.log(err);\r\n  } else {\r\n    console.log(res);\r\n  }\r\n});"],"file":"server.js"}